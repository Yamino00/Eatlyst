import { Unit } from './enums';
import { IngredientCategory } from './ingredient.model';

export interface GroceryList {
  id: string;
  userId: string;
  
  // List details
  title: string;
  description?: string;
  
  // Source information
  weeklyPlanId?: string; // If generated from a weekly plan
  recipeIds: string[]; // Recipes that contributed to this list
  
  // Items
  items: GroceryItem[];
  
  // Organization
  categories: GroceryCategory[];
  
  // Shopping information
  store?: string;
  estimatedTotal: number;
  actualTotal?: number;
  
  // Status
  isCompleted: boolean;
  completedAt?: Date;
  
  // Sharing
  isShared: boolean;
  sharedWith: string[]; // Array of user IDs
  assignedTo?: string; // User ID of who's assigned to shop
  
  // Smart features
  autoGenerated: boolean;
  optimized: boolean; // If quantities were optimized
  
  // Timestamps
  createdAt: Date;
  updatedAt: Date;
  scheduledShoppingDate?: Date;
}

export interface GroceryItem {
  id: string;
  ingredientId?: string; // Reference to ingredient if available
  
  // Item details
  name: string;
  quantity: number;
  unit: Unit;
  category: IngredientCategory;
  
  // Price information
  estimatedPrice: number;
  actualPrice?: number;
  
  // Status
  isPurchased: boolean;
  purchasedAt?: Date;
  purchasedBy?: string; // User ID
  
  // Source tracking
  recipeIds: string[]; // Which recipes need this ingredient
  originalQuantities: OriginalQuantity[]; // Before aggregation
  
  // Shopping details
  brand?: string;
  notes?: string;
  priority: Priority;
  
  // Substitution
  substituteFor?: string; // If this is a substitute for another ingredient
  isOptional: boolean;
}

export interface OriginalQuantity {
  recipeId: string;
  recipeName: string;
  quantity: number;
  unit: Unit;
  servings: number; // Recipe servings this quantity is for
}

export interface GroceryCategory {
  id: string;
  name: string;
  color: string;
  iconName: string;
  sortOrder: number;
  items: GroceryItem[];
}

export enum Priority {
  LOW = 'low',
  MEDIUM = 'medium',
  HIGH = 'high',
  ESSENTIAL = 'essential'
}

// For smart aggregation
export interface AggregationRule {
  ingredientId: string;
  preferredUnit: Unit;
  roundingRule: RoundingRule;
  minimumQuantity?: number;
  packageSizes: number[]; // Common package sizes for this ingredient
}

export enum RoundingRule {
  ROUND_UP = 'round-up',
  ROUND_DOWN = 'round-down',
  ROUND_NEAREST = 'round-nearest',
  NO_ROUNDING = 'no-rounding'
}

// For cost tracking and optimization
export interface CostAnalysis {
  totalEstimated: number;
  totalActual?: number;
  variance?: number;
  
  // Category breakdown
  categoryBreakdown: CategoryCost[];
  
  // Recipe contribution
  recipeContribution: RecipeCost[];
  
  // Recommendations
  costSavingTips: string[];
}

export interface CategoryCost {
  category: IngredientCategory;
  estimated: number;
  actual?: number;
  itemCount: number;
}

export interface RecipeCost {
  recipeId: string;
  recipeName: string;
  estimated: number;
  actual?: number;
  costPerServing: number;
}

// For shopping history and analytics
export interface ShoppingHistory {
  userId: string;
  entries: ShoppingEntry[];
  
  // Analytics
  averageSpending: number;
  mostBoughtItems: string[];
  preferredStores: string[];
  shoppingFrequency: number; // days between shopping trips
}

export interface ShoppingEntry {
  groceryListId: string;
  date: Date;
  store: string;
  total: number;
  itemCount: number;
  duration?: number; // minutes spent shopping
}